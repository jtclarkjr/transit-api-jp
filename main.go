package main

import (
	"fmt"
	"net/http"

	"transit-api/handler"

	_ "transit-api/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/jtclarkjr/router-go"
	"github.com/jtclarkjr/router-go/middleware"
	httpSwagger "github.com/swaggo/http-swagger/v2"
)

// @title Transit API JP
// @version 1.0
// @description API for Japanese transit route planning and station autocomplete
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@example.com

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /

func main() {
	r := router.NewRouter()

	// CORS middleware to allow all origins
	r.Use(func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set("Access-Control-Allow-Origin", "*")
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
			if r.Method == "OPTIONS" {
				w.WriteHeader(http.StatusNoContent)
				return
			}
			next.ServeHTTP(w, r)
		})
	})
	r.Use(middleware.Logger)

	r.Use(middleware.EnvVarChecker("RAPIDAPI_KEY", "RAPIDAPI_TRANSPORT_HOST", "RAPIDAPI_TRANSIT_HOST"))

	// Add a basic root route for testing
	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("Transit API JP - Server is running"))
	})
	// Swagger UI - using wildcard pattern
	r.Get("/swagger/*", httpSwagger.WrapHandler)

	r.Use(middleware.RateLimiter)
	r.Use(middleware.Throttle(100))
	r.Get("/transit", handler.Transit())
	r.Get("/autocomplete", handler.Autocomplete)

	// Handle Swagger assets that are requested without /swagger/ prefix
	r.Get("/swagger-ui.css", httpSwagger.WrapHandler)
	r.Get("/swagger-ui-bundle.js", httpSwagger.WrapHandler)
	r.Get("/swagger-ui-standalone-preset.js", httpSwagger.WrapHandler)

	fmt.Println("Starting server on :8080")
	err := http.ListenAndServe(":8080", r)
	if err != nil {
		return
	}
}
